# 1. Collection Framework

  * 정의 : 다수의 데이터 그룹을 활용하는 표준화된 프로그래밍 방식
  
  * List : 순서가 있고, 데이터의 중복을 허용하는 인터페이스 집합(ArrayList, LinkedList, Stack, Vector)
  
  * Set : 순서를 유지하지 않고 중복도 허용하지 않는 인터페이스 집합(HashSet, TreeSet)
     
  * Map : Key-Value 쌍으로 이루어진 데이터의 집합으로 키는 중복을 허용하지 않는다. (HashMap, TreeMap, Hashtable, Properties)  
  
  ------
  
# 2. Copy
 
  * Deep copy : 원본과 같은 데이터를 저장하고 있는 객체나 배열을 생성하며, 원본 데이터가 바뀌더라도 복사본은 영향을 받지 않는다.(함수 arrayCopy)
  
  * Shallow copy : 참조만 복사하기 때문에 원본이 변경되면 복사본도 같이 변경된다.

------

# 3. Iterator

  * 정의 : 컬렉션에 저장된 각 요소에 접근하는 기능을 가진 반복자 인터페이스 Class/Object : 클래스에 정의된 대로 객체가 생성되며, 만들어진 객체는 그 클래스의 인스턴스라고 한다. (그리고 인스턴스는 참조변수를 통해서만 다룰 수 있다.)
  
  * Instance : 인스턴스 변수와 메소드는 인스턴스를 생성한 후 사용가능하며 인스턴스마다 서로 다른 값을 가질 수 있다. 클래스 변수와 메소드는 static 키워드를 활용해 사용할 수 있고, 모든 인스턴스들이 공통적인 값을 유지할 때 사용한다. (모든 인스턴스가 하나의 저장공간을 공유)
  
  * JVM 메모리구조 : Method area, Call Stack, Heap
  
  * Overloading : 메소드의 이름이 같고 파라미터 갯수나 리턴 값 타입이 달라야한다. (ex : println함수)
  
  * Inheritance : 클래스 간의 관계는 포함(has-a)와 상속(is-a)로 구분할 수 있으며, 상황에 따라 클래스 자체가 변수로 쓰일 수도 있다.
  
  * OVerriding : 조상클래스로부터 상속받은 메소드의 내용을 상황에 맞게 변경할 수도 있다. 단, 선언부(이름, 리턴타입, 매개변수 등)는 같아야 한다.

  * Polymorphism : 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있다. (상위 클래스변수는 하위 객체로 생성이 가능하다. ex: parent p = new child());
